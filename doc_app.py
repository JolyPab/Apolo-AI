import streamlit as st
from langchain_openai import AzureChatOpenAI, AzureOpenAIEmbeddings
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory
from langchain_community.vectorstores import FAISS
from langchain.prompts import PromptTemplate
from datetime import datetime
import os
import json
from dotenv import load_dotenv

# --- env --------------------------------------------------------------------
load_dotenv()

# --- embeddings & index -----------------------------------------------------
embeddings = AzureOpenAIEmbeddings(
    api_key=os.getenv("AZURE_EMBEDDINGS_API_KEY"),
    azure_endpoint=os.getenv("AZURE_EMBEDDINGS_ENDPOINT"),
    deployment="text-embedding-ada-002",
    api_version="2023-05-15",
)

INDEX_DIR = "doc_faiss"  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∑–∞—Ä–∞–Ω–µ–µ
IMAGES_DIR = f"{INDEX_DIR}_images"
index = FAISS.load_local(INDEX_DIR, embeddings, allow_dangerous_deserialization=True)

# --- load images info -------------------------------------------------------
images_info = []
images_info_path = os.path.join(IMAGES_DIR, "images_info.json")

if os.path.exists(images_info_path):
    with open(images_info_path, "r", encoding="utf-8") as f:
        images_info = json.load(f)

def get_related_images(question, answer):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã —Å –≤–æ–ø—Ä–æ—Å–æ–º/–æ—Ç–≤–µ—Ç–æ–º —á–µ—Ä–µ–∑ AI"""
    if not images_info:
        return []
    
    # –°–æ–∑–¥–∞—ë–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AI
    images_desc = []
    for i, img in enumerate(images_info):
        images_desc.append(f"Imagen {i+1}: {img['filename']} - {img.get('description', 'Imagen del documento')}")
    
    images_list = "\n".join(images_desc)
    
    prompt_analisis = f"""
Analiza si alguna de estas im√°genes del documento es relevante para la pregunta y respuesta dadas.

IM√ÅGENES DISPONIBLES:
{images_list}

PREGUNTA DEL USUARIO: {question}

RESPUESTA DADA: {answer}

¬øQu√© im√°genes (si hay alguna) ser√≠an √∫tiles mostrar al usuario para complementar esta respuesta?

Responde SOLO con los n√∫meros de las im√°genes relevantes separados por comas (ej: "1,3") o "ninguna" si no hay im√°genes relevantes.
"""
    
    try:
        # Usamos el mismo LLM para analizar
        analysis = llm.invoke(prompt_analisis).content.strip().lower()
        
        if "ninguna" in analysis or not analysis:
            return []
        
        # Extraemos n√∫meros de im√°genes
        import re
        numbers = re.findall(r'\d+', analysis)
        related_images = []
        
        for num in numbers:
            idx = int(num) - 1  # convertir a 0-based index
            if 0 <= idx < len(images_info):
                related_images.append(images_info[idx]["filename"])
        
        return related_images
        
    except Exception as e:
        # Fallback: –µ—Å–ª–∏ AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        keywords = ["esquema", "diagrama", "figura", "imagen", "gr√°fico", "procedimiento", "paso", "proceso"]
        text_to_check = (question + " " + answer).lower()
        
        if any(keyword in text_to_check for keyword in keywords):
            return [img["filename"] for img in images_info[:2]]  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
        
        return []

# --- llm --------------------------------------------------------------------
llm = AzureChatOpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_deployment="gpt-4",
    api_version="2024-02-15-preview",
)

# --- prompt -----------------------------------------------------------------
current_date = datetime.now().strftime("%Y-%m-%d")
TEMPLATE = """
Eres un asistente t√©cnico. Responde √∫nicamente bas√°ndote en el contenido del documento proporcionado.
Si la pregunta no est√° relacionada o la informaci√≥n no se encuentra en el documento, responde educadamente que no dispones de datos.

El documento tambi√©n contiene {num_images} im√°genes/diagramas que pueden ser relevantes para las consultas.

Fecha actual: {current_date}

Historial del di√°logo:
{chat_history}

Contexto del documento:
{context}

Pregunta del usuario: {question}
Respuesta:
"""
PROMPT = PromptTemplate(
    input_variables=["context", "chat_history", "current_date", "question", "num_images"],
    template=TEMPLATE,
).partial(current_date=current_date, num_images=len(images_info))

# --- memory & chain ---------------------------------------------------------
if "memory" not in st.session_state:
    st.session_state["memory"] = ConversationBufferMemory(
        memory_key="chat_history",
        input_key="question",
        output_key="answer",
        return_messages=True,
    )

# --- chat history -----------------------------------------------------------
if "messages" not in st.session_state:
    st.session_state.messages = []

qa = ConversationalRetrievalChain.from_llm(
    llm=llm,
    retriever=index.as_retriever(search_kwargs={"k": 20}),
    memory=st.session_state["memory"],
    combine_docs_chain_kwargs={"prompt": PROMPT},
)

# --- UI ---------------------------------------------------------------------
st.set_page_config(page_title="Asistente Documento", page_icon="üìÑ")
st.title("üìÑ Asistente del Documento")

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.markdown("### üìã Informaci√≥n del documento")
    if images_info:
        st.markdown(f"üñºÔ∏è **Im√°genes encontradas:** {len(images_info)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        st.markdown("### üñºÔ∏è Im√°genes del documento")
        for i, img_info in enumerate(images_info):
            img_path = os.path.join(IMAGES_DIR, img_info["filename"])
            if os.path.exists(img_path):
                with st.expander(f"Imagen {i+1} ({img_info['size']} bytes)"):
                    st.image(img_path, use_container_width=True)
    else:
        st.markdown("üñºÔ∏è **Im√°genes:** No encontradas")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    if st.button("üóëÔ∏è Limpiar historial"):
        st.session_state.messages = []
        st.session_state["memory"].clear()
        st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –ü–æ–ª–µ –≤–≤–æ–¥–∞
if prompt := st.chat_input("Preg√∫ntame sobre el documento‚Ä¶"):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        message_placeholder.markdown("ü§î Pensando...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        try:
            result = qa.invoke({"question": prompt})
            respuesta = result["answer"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            related_images = get_related_images(prompt, respuesta)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
            message_placeholder.markdown(respuesta)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if related_images:
                st.markdown("### üñºÔ∏è Im√°genes relacionadas:")
                cols = st.columns(min(len(related_images), 3))  # –º–∞–∫—Å–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏
                for i, img_filename in enumerate(related_images):
                    img_path = os.path.join(IMAGES_DIR, img_filename)
                    if os.path.exists(img_path):
                        with cols[i % 3]:
                            st.image(img_path, caption=f"Imagen {i+1}", use_container_width=True)
                            
        except Exception as e:
            respuesta = f"‚ùå Error: {str(e)}\n\nRevisa las claves de Azure OpenAI en los secretos."
            message_placeholder.markdown(respuesta)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "assistant", "content": respuesta}) 